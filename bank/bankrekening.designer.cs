#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace bank
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="rekening")]
	public partial class bankrekeningDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Inserttype(type instance);
    partial void Updatetype(type instance);
    partial void Deletetype(type instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    #endregion
		
		public bankrekeningDataContext() : 
				base(global::bank.Properties.Settings.Default.rekeningConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public bankrekeningDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public bankrekeningDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public bankrekeningDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public bankrekeningDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<type> types
		{
			get
			{
				return this.GetTable<type>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.type")]
	public partial class type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Naam;
		
		private double _Rente;
		
		private double _MaxOpname;
		
		private EntitySet<Account> _Accounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNaamChanging(string value);
    partial void OnNaamChanged();
    partial void OnRenteChanging(double value);
    partial void OnRenteChanged();
    partial void OnMaxOpnameChanging(double value);
    partial void OnMaxOpnameChanged();
    #endregion
		
		public type()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Naam", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Naam
		{
			get
			{
				return this._Naam;
			}
			set
			{
				if ((this._Naam != value))
				{
					this.OnNaamChanging(value);
					this.SendPropertyChanging();
					this._Naam = value;
					this.SendPropertyChanged("Naam");
					this.OnNaamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rente", DbType="Float NOT NULL")]
		public double Rente
		{
			get
			{
				return this._Rente;
			}
			set
			{
				if ((this._Rente != value))
				{
					this.OnRenteChanging(value);
					this.SendPropertyChanging();
					this._Rente = value;
					this.SendPropertyChanged("Rente");
					this.OnRenteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxOpname", DbType="Float NOT NULL")]
		public double MaxOpname
		{
			get
			{
				return this._MaxOpname;
			}
			set
			{
				if ((this._MaxOpname != value))
				{
					this.OnMaxOpnameChanging(value);
					this.SendPropertyChanging();
					this._MaxOpname = value;
					this.SendPropertyChanged("MaxOpname");
					this.OnMaxOpnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="type_Account", Storage="_Accounts", ThisKey="Naam", OtherKey="Type")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.type1 = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.type1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _BSN;
		
		private string _voorletters;
		
		private string _voornaam;
		
		private string _achternaam;
		
		private string _adres;
		
		private string _postcode;
		
		private string _woonplaats;
		
		private string _telefoonnummer;
		
		private string _email;
		
		private EntitySet<Account> _Accounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBSNChanging(string value);
    partial void OnBSNChanged();
    partial void OnvoorlettersChanging(string value);
    partial void OnvoorlettersChanged();
    partial void OnvoornaamChanging(string value);
    partial void OnvoornaamChanged();
    partial void OnachternaamChanging(string value);
    partial void OnachternaamChanged();
    partial void OnadresChanging(string value);
    partial void OnadresChanged();
    partial void OnpostcodeChanging(string value);
    partial void OnpostcodeChanged();
    partial void OnwoonplaatsChanging(string value);
    partial void OnwoonplaatsChanged();
    partial void OntelefoonnummerChanging(string value);
    partial void OntelefoonnummerChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    #endregion
		
		public Customer()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BSN", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string BSN
		{
			get
			{
				return this._BSN;
			}
			set
			{
				if ((this._BSN != value))
				{
					this.OnBSNChanging(value);
					this.SendPropertyChanging();
					this._BSN = value;
					this.SendPropertyChanged("BSN");
					this.OnBSNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_voorletters", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string voorletters
		{
			get
			{
				return this._voorletters;
			}
			set
			{
				if ((this._voorletters != value))
				{
					this.OnvoorlettersChanging(value);
					this.SendPropertyChanging();
					this._voorletters = value;
					this.SendPropertyChanged("voorletters");
					this.OnvoorlettersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_voornaam", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string voornaam
		{
			get
			{
				return this._voornaam;
			}
			set
			{
				if ((this._voornaam != value))
				{
					this.OnvoornaamChanging(value);
					this.SendPropertyChanging();
					this._voornaam = value;
					this.SendPropertyChanged("voornaam");
					this.OnvoornaamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_achternaam", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string achternaam
		{
			get
			{
				return this._achternaam;
			}
			set
			{
				if ((this._achternaam != value))
				{
					this.OnachternaamChanging(value);
					this.SendPropertyChanging();
					this._achternaam = value;
					this.SendPropertyChanged("achternaam");
					this.OnachternaamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_adres", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string adres
		{
			get
			{
				return this._adres;
			}
			set
			{
				if ((this._adres != value))
				{
					this.OnadresChanging(value);
					this.SendPropertyChanging();
					this._adres = value;
					this.SendPropertyChanged("adres");
					this.OnadresChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_postcode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string postcode
		{
			get
			{
				return this._postcode;
			}
			set
			{
				if ((this._postcode != value))
				{
					this.OnpostcodeChanging(value);
					this.SendPropertyChanging();
					this._postcode = value;
					this.SendPropertyChanged("postcode");
					this.OnpostcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_woonplaats", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string woonplaats
		{
			get
			{
				return this._woonplaats;
			}
			set
			{
				if ((this._woonplaats != value))
				{
					this.OnwoonplaatsChanging(value);
					this.SendPropertyChanging();
					this._woonplaats = value;
					this.SendPropertyChanged("woonplaats");
					this.OnwoonplaatsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_telefoonnummer", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string telefoonnummer
		{
			get
			{
				return this._telefoonnummer;
			}
			set
			{
				if ((this._telefoonnummer != value))
				{
					this.OntelefoonnummerChanging(value);
					this.SendPropertyChanging();
					this._telefoonnummer = value;
					this.SendPropertyChanged("telefoonnummer");
					this.OntelefoonnummerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Account", Storage="_Accounts", ThisKey="BSN", OtherKey="Rekeningeigenaar")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IBAN;
		
		private string _Rekeningeigenaar;
		
		private double _Saldo;
		
		private string _Type;
		
		private System.DateTime _Startdatum;
		
		private System.Nullable<System.DateTime> _afsluitdaten;
		
		private EntityRef<type> _type1;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIBANChanging(string value);
    partial void OnIBANChanged();
    partial void OnRekeningeigenaarChanging(string value);
    partial void OnRekeningeigenaarChanged();
    partial void OnSaldoChanging(double value);
    partial void OnSaldoChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnStartdatumChanging(System.DateTime value);
    partial void OnStartdatumChanged();
    partial void OnafsluitdatenChanging(System.Nullable<System.DateTime> value);
    partial void OnafsluitdatenChanged();
    #endregion
		
		public Account()
		{
			this._type1 = default(EntityRef<type>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IBAN", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IBAN
		{
			get
			{
				return this._IBAN;
			}
			set
			{
				if ((this._IBAN != value))
				{
					this.OnIBANChanging(value);
					this.SendPropertyChanging();
					this._IBAN = value;
					this.SendPropertyChanged("IBAN");
					this.OnIBANChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rekeningeigenaar", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Rekeningeigenaar
		{
			get
			{
				return this._Rekeningeigenaar;
			}
			set
			{
				if ((this._Rekeningeigenaar != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRekeningeigenaarChanging(value);
					this.SendPropertyChanging();
					this._Rekeningeigenaar = value;
					this.SendPropertyChanged("Rekeningeigenaar");
					this.OnRekeningeigenaarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Saldo", DbType="Float NOT NULL")]
		public double Saldo
		{
			get
			{
				return this._Saldo;
			}
			set
			{
				if ((this._Saldo != value))
				{
					this.OnSaldoChanging(value);
					this.SendPropertyChanging();
					this._Saldo = value;
					this.SendPropertyChanged("Saldo");
					this.OnSaldoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					if (this._type1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Startdatum", DbType="DateTime NOT NULL")]
		public System.DateTime Startdatum
		{
			get
			{
				return this._Startdatum;
			}
			set
			{
				if ((this._Startdatum != value))
				{
					this.OnStartdatumChanging(value);
					this.SendPropertyChanging();
					this._Startdatum = value;
					this.SendPropertyChanged("Startdatum");
					this.OnStartdatumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_afsluitdaten", DbType="DateTime")]
		public System.Nullable<System.DateTime> afsluitdaten
		{
			get
			{
				return this._afsluitdaten;
			}
			set
			{
				if ((this._afsluitdaten != value))
				{
					this.OnafsluitdatenChanging(value);
					this.SendPropertyChanging();
					this._afsluitdaten = value;
					this.SendPropertyChanged("afsluitdaten");
					this.OnafsluitdatenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="type_Account", Storage="_type1", ThisKey="Type", OtherKey="Naam", IsForeignKey=true)]
		public type type1
		{
			get
			{
				return this._type1.Entity;
			}
			set
			{
				type previousValue = this._type1.Entity;
				if (((previousValue != value) 
							|| (this._type1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._type1.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._type1.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._Type = value.Naam;
					}
					else
					{
						this._Type = default(string);
					}
					this.SendPropertyChanged("type1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Account", Storage="_Customer", ThisKey="Rekeningeigenaar", OtherKey="BSN", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._Rekeningeigenaar = value.BSN;
					}
					else
					{
						this._Rekeningeigenaar = default(string);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
